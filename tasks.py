import os
import re
import asyncio
import aiohttp
import openpyxl
from io import BytesIO
from dotenv import load_dotenv
from celery import Celery
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏ Celery
REDIS_URL = os.getenv("REDIS_URL")
celery = Celery("tasks", broker=REDIS_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
SessionLocal = scoped_session(sessionmaker(bind=engine))

# –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ declarative_base
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    email = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    plan = Column(String, default="free")
    requests_used = Column(Integer, default=0)
    is_admin = Column(Integer, default=0)

class TempEmail(Base):
    __tablename__ = "temp_emails"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))  # user_id —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ users.id
    email = Column(String)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
Base.metadata.create_all(bind=engine)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
EMAIL_REGEX = r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"
EXCLUDE_DOMAINS = ["sentry.io", "cloudflare", "example.com", "no-reply", "noreply", "support", "admin", "localhost"]

# –ü–æ–ª—É—á–µ–Ω–∏–µ HTML
async def fetch_html(session, url):
    try:
        async with session.get(url, timeout=10) as response:
            return await response.text()
    except:
        return ""

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email'–æ–≤
async def extract_emails(urls):
    emails = set()
    headers = {"User-Agent": "Mozilla/5.0"}
    async with aiohttp.ClientSession(headers=headers) as session:
        htmls = await asyncio.gather(*(fetch_html(session, url) for url in urls))
        for html in htmls:
            found = re.findall(EMAIL_REGEX, html)
            for email in found:
                if not any(bad in email for bad in EXCLUDE_DOMAINS):
                    emails.add(email)
    return list(emails)

# –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ Celery
@celery.task
def collect_emails_to_file(user_id, urls, max_count):
    print(f"üì• Starte E-Mail-Sammlung f√ºr User {user_id}")
    db = SessionLocal()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ email'—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.query(TempEmail).filter_by(user_id=user_id).delete()
    db.commit()

    emails = asyncio.run(extract_emails(urls))
    selected = emails[:max_count]
    print(f"üì® Gefundene E-Mails: {len(emails)}, verwendet: {len(selected)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    for email in selected:
        db.add(TempEmail(user_id=user_id, email=email))
    db.commit()

    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Emails"
    ws.append(["E-Mail"])
    for e in selected:
        ws.append([e])

    output_path = f"/tmp/emails_user_{user_id}.xlsx"
    wb.save(output_path)
    print(f"‚úÖ Datei gespeichert: {output_path}")

    db.close()
